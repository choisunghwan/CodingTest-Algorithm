자료형
----------------------------

a = 777
print(a)

a = a+5
print(a)

a=a-3
print(a)

a=1e9
print(a)

a= 75e2
print(a)

a=75.25e1
print(a)

a=3954e-3
print(a)

----------------------------
문제 1.
컴퓨터 시스템은 실수정보를 표현하는 정확도에 한계를 가진다.
예를 들어 10진수 체계에서는 0.3과 0.6을 더한 값이 0.9로 정확히 떨어진다.
하지만 2진수에서는 0.9를 정확히 표현할 수 있는 방법이 없다.
컴퓨터는 최대한 0.9와 가깝게 표현하지만, 미세한 오차가 발생하게 된다.


a=0.3+0.6
print(a)

if a ==0.9:
  print(True)
else:
  print(False)


위 코드 실행 시  0.9가 아닌 0.8999999999999가 실행되며, False 가 출력됨.
----------------------------
*위 문제1처럼 개발 과정에서 실수 값을 제대로 비교하지 못해서 원하는 결과를 얻지 못할 수 있다.
이럴 때는 round()함수 를 이용할 수 있으며, 이러한 방법이 권장된다.<round()=반올림함수>

예를 들어 123.456을 소수 셋째자리에서 반올림하려면 round(123.456, 2)라고 작성한다.
결과는 123.46이 된다.

a=0.3+0.6
print(round(a,4))

if round(a,4) ==0.9:
  print(True)
else:
  print(False)
----------------------------

a= 6/2
print(a)

=> 3.0

a= 7 % 2
print(a)
=>1

a= 7 // 2
print(a)

=>3

----------------------------

사전, 집합 자료형

a=dict()
a['홍길동']=97
a['이순신']=100


print(a)


b={
  '홍길동':98,
  '이순신':100
  }
print(b)
print(b['이순신'])


key_list =list(b.keys())
print(key_list)
 

----------------------------

빠르게 입력 받기
사용자로부터 입력을 최대한 빠르게 받아야 하는 경우가 있다.
파이썬의 경우 sys 라이브러리에 정의되어 있는 sys.stdin.readline()메서드를 이용한다.
-단 입력 후 엔터(enter)가 줄 바꿈 기호로 입력되므로 rstrip() 메서드를 함께 사용한다.

import sys #시스템 모듈을 받아옴.

data=sys.stdin.readline().rstrip()

print(data)


----------------------------
자주 사용되는 표준 출력 방법
파이썬에서 기본 출력은 print() 함수를 이용한다.
각 변수를 콤마(,)를 이용하여 띄어쓰기로 구분하여 출력할 수 있다.
print()는 기본적으로 출력 이후에 줄 바꿈을 수행한다.
줄 바꿈을 원치 않는 경우 'end' 속성을 이용할 수 있다.

a=1
b=2

print(a,b)

print(7, end=" ")
print(8, end=" ")

answer = 7
print("정답은" + str(answer)+"입니다.")